name: branch deploy

# The workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [ created ]

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  pages: write
  id-token: write

jobs:
  # branch-deploy trigger job
  trigger:
    if: # only run on pull request comments and valid triggers
      ${{ github.event.issue.pull_request &&
      (contains(github.event.comment.body, '.deploy') ||
      contains(github.event.comment.body, '.lock') ||
      contains(github.event.comment.body, '.wcid') ||
      contains(github.event.comment.body, '.unlock')) }}
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.branch-deploy.outputs.continue }}
      noop: ${{ steps.branch-deploy.outputs.noop }}
      deployment_id: ${{ steps.branch-deploy.outputs.deployment_id }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      ref: ${{ steps.branch-deploy.outputs.ref }}
      comment_id: ${{ steps.branch-deploy.outputs.comment_id }}

    steps:
      - uses: github/branch-deploy@d1820170681a61752f174f5384507f9ae7e2646a # pin@v4.4.1
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment: "github-pages"
          production_environment: "github-pages"
          skip_completing: "true"
          admins: "GrantBirki"

  # build the site with hugo
  build:
    needs: trigger
    if: ${{ needs.trigger.outputs.continue == 'true' }}
    runs-on: ubuntu-latest

    steps:

      - run: exit 1 # testing

      # Checkout your projects repository based on the ref provided by the branch-deploy step
      - name: checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3.3.0
        with:
          ref: ${{ needs.trigger.outputs.ref }}

      - name: set hugo version
        id: hugo-version
        run: |
          HUGO_VERSION=$(cat .hugo-version)
          echo "HUGO_VERSION=${HUGO_VERSION}" >> $GITHUB_OUTPUT

      - name: install hugo cli
        env:
          HUGO_VERSION: ${{ steps.hugo-version.outputs.HUGO_VERSION }}
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: setup pages
        id: pages
        uses: actions/configure-pages@c5a3e1159e0cbdf0845eb8811bd39e39fc3099c2 # pin@v2.1.3

      - name: build with hugo
        run: |
          hugo --gc --verbose \
            --baseURL ${{ steps.pages.outputs.base_url }}

      - name: write build version
        run: echo ${GITHUB_SHA} > ./public/version.txt

      - name: upload artifact
        uses: actions/upload-pages-artifact@253fd476ed429e83b7aae64a92a75b4ceb1a17cf # pin@v1.0.7
        with:
          path: ./public

  # deploy to GitHub Pages
  deploy:
    needs: [ trigger, build ]
    if: ${{ needs.trigger.outputs.continue == 'true' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: deploy
        id: deployment
        uses: actions/deploy-pages@20a4baa1095bad40ba7d6ca0d9abbc220b76603f # pin@v1.2.3

  # update the deployment result
  result:
    needs: [ trigger, build, deploy ]
    runs-on: ubuntu-latest
    # run even on failures
    if: ${{ always() && needs.trigger.outputs.continue == 'true' }}

    steps:
      # if a previous step failed, set a variable to use in the status
      - name: set failure status
        id: deploy-status
        if: ${{ needs.trigger.result == 'failure' || needs.build.result == 'failure' ||
          needs.deploy.result == 'failure' }}
        run: |
          echo "DEPLOY_STATUS=failure" >> $GITHUB_OUTPUT

      - name: Create a deployment status
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
          DEPLOY_STATUS: ${{ steps.deploy-status.outputs.DEPLOY_STATUS }}
        run: |
          if [ -z "${DEPLOY_STATUS}" ]; then
            DEPLOY_STATUS="success"
          fi

          gh api \
            --method POST \
            repos/{owner}/{repo}/deployments/${{ needs.trigger.outputs.deployment_id }}/statuses \
            -f environment='${{ needs.trigger.outputs.environment }}' \
            -f state=${DEPLOY_STATUS}

      - name: remove eyes reaction
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method DELETE \
            repos/{owner}/{repo}/issues/comments/${{ steps.find-comment.outputs.comment-id }}/reactions/eyes

      - name: rocket reaction
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS != 'failure' }}
        uses: GrantBirki/comment@1e9986de26cf23e6c4350276234c91705c540fef # pin@v2.0.3
        with:
          comment-id: ${{ needs.trigger.outputs.comment_id }}
          reactions: rocket

      - name: failure reaction
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS == 'failure' }}
        uses: GrantBirki/comment@1e9986de26cf23e6c4350276234c91705c540fef # pin@v2.0.3
        with:
          comment-id: ${{ needs.trigger.outputs.comment_id }}
          reactions: "-1"
